{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/topic.component.css","webpack:///./src/app/components/topic.component.html","webpack:///./src/app/components/topic.component.ts","webpack:///./src/app/components/topic.model.ts","webpack:///./src/app/services/RedditService.ts","webpack:///./src/app/services/VoteService.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".card{\\n    padding-right: 15px;\\n    padding-left: 15px;\\n    padding-top: 15px;\\n    padding-bottom: 15px;\\n    margin-top: 10px; \\n}\\n\\n.self-intro {\\n    height: auto;\\n}\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div class=\\\"jumbotron text-center\\\" style=\\\"margin-bottom:0\\\">\\n  <h1>RedditLike</h1>\\n  <p>This is for coding challenge</p> \\n</div>\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-4 \\\">\\n      <div class=\\\"card self-intro\\\">\\n        <p class=\\\"card-title\\\" style=\\\"text-align: center\\\">It is not enough to do your best: you must know what to do, and <b>THEN</b> do your best.</p> \\n        <p style=\\\"text-align:right\\\">-- W. Edwards Deming</p>\\n        <p class=\\\"card-text\\\"></p>\\n      </div>\\n    </div>\\n    <div class=\\\"col-sm-8\\\">\\n      <div class=\\\"row card\\\">\\n          <h3 class=\\\"card-title\\\">Add a Topic</h3>\\n          <form role=\\\"form\\\" [formGroup]=\\\"topicForm\\\" (ngSubmit)=\\\"addTopic(topicForm.value)\\\">           \\n            <div class=\\\"form-group\\\">\\n              <div>\\n                <label for=\\\"title\\\">Title:</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"title\\\" [formControl]=\\\"titleControl\\\"\\n                  placeholder=\\\"Please enter the title\\\">\\n                <div [hidden]=\\\"titleControl.valid || titleControl.untouched\\\">\\n            \\n                  <div [hidden]=\\\"!titleControl.hasError('maxlength')\\\">\\n                    Title can not be longer than 255 characters.\\n                  </div>\\n                  <div [hidden]=\\\"!titleControl.hasError('required')\\\">\\n                    Title is required.\\n                  </div>\\n                </div>\\n              </div>\\n            </div>\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"!topicForm.valid\\\">\\n              Submit\\n            </button>\\n          </form>\\n      </div>\\n      \\n      <!-- Topic list -->\\n      <div> \\n        <topic *ngFor=\\\"let topic of topics\\\" [topic]=\\\"topic\\\" (update)=\\\"updateTopics($event)\\\">\\n          Topic List is Loading..\\n        </topic>\\n      </div>  \\n\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { Topic } from './components/topic.model';\nimport { RedditService } from './services/RedditService';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  topics: Topic[];\n  \n  // form for creating new topic \n  titleControl = new FormControl('', [\n    Validators.required,\n    Validators.maxLength(255)\n  ]);\n\n  topicForm: FormGroup = this.builder.group({\n    titleControl : this.titleControl\n  });\n\n  constructor(\n    private builder: FormBuilder, \n    private redditService: RedditService ) {\n\n  }\n  \n  // sorted by number of likes and only list top 20 topics\n  updateTopics(update?: boolean): void {    \n  //   let sortedtopics: topic[] = this.topics.sort((a: topic, b: topic) => b.likes-a.likes);\n  //   if (sortedtopics.length <= 20) {  \n  //     return sortedtopics;\n  //   } else {\n  //     return sortedtopics.slice(0, 20);\n  //   }\n    this.topics = null;\n    this.redditService.getTopics()\n      .subscribe((res: Topic[]) => {\n        console.log(\"topics: \", res);\n        if (res && res.length > 0) {\n          this.topics = res;\n        }\n      });\n  }\n\n  // add a topic\n  addTopic(form: any): void {\n    this.redditService.newTopic(form.titleControl).subscribe(res => {\n      console.log(`Successfully add a topic:`, form.titleControl);\n      // Refresh topic list\n      this.updateTopics();\n    });    \n  }\n\n  // Query the topic list when initializing this component\n  ngOnInit(): void {\n    this.updateTopics();\n  }\n}\n","/**\n * Angular\n */\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HttpModule } from '@angular/http';\n\n/**\n * Components\n */\nimport { AppComponent } from './app.component';\nimport { TopicComponent } from './components/topic.component';\n\n/**\n * Services\n */\nimport {REDDIT_PROVIDERS, API_URL} from './services/RedditService';\nimport {VOTE_PROVIDERS} from './services/VoteService';\n\n\n\n/**\n * Value of url is determined by whether it's under production environment\n */\nconst isProduction: boolean = false;\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TopicComponent,\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    HttpModule\n  ],\n  providers: [\n    REDDIT_PROVIDERS,\n    VOTE_PROVIDERS,\n    {\n      provide: API_URL, \n      useValue: isProduction ? \n        \"https://\" :\n        \"http://localhost:8080\"\n    }\n  ],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n","module.exports = \".upvote {\\n    color: white;\\n    background-color: #CC6666;\\n    border-color: black;\\n    border: 1px;\\n    margin-right: 2px;\\n}\\n\\n.downvote {\\n    color: white;\\n    background-color: #B8B8B8;\\n    border-color: black;\\n    border: 1px;\\n    margin-right: 2px;\\n}\"","module.exports = \"<div>\\n  <h3 class=\\\"card-title\\\"> {{ topic.title }} </h3>\\n  <p> {{ topic.votes }} likes this topic</p>\\n  <div>\\n    <button type=\\\"button\\\" class=\\\"btn upvote\\\" (click)=\\\"upvote()\\\">\\n      <span class=\\\"glyphicon glyphicon-arrow-up\\\">upvote</span>\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn downvote\\\" (click)=\\\"downvote()\\\">\\n      <span class=\\\"glyphicon glyphicon-arrow-down\\\">downvote</span>\\n    </button>\\n  </div>\\n</div>\"","import { Component, OnInit, EventEmitter } from '@angular/core';\nimport { VoteService } from '../services/VoteService';\nimport { Topic } from './topic.model';\n\n@Component({\n  selector: 'topic',\n  templateUrl: './topic.component.html',\n  styleUrls: ['./topic.component.css'],\n  inputs: ['topic'],\n  outputs: ['update'],\n  host: {\n    class: 'row card'\n  }\n})\nexport class TopicComponent implements OnInit {\n  topic: Topic;\n  update: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private voteService: VoteService) {\n\n  }\n\n  upvote() {\n    this.voteService.voteById(this.topic.id, true).subscribe(res => {\n      this.update.next(true);\n      console.log(`votes of ${this.topic.id} + 1`);\n    });\n  }\n\n  downvote() {\n    this.voteService.voteById(this.topic.id, false).subscribe(res => {\n      this.update.next(true);\n      console.log(`votes of ${this.topic.id} - 1`);\n    });\n  }\n\n  ngOnInit() {\n  }\n\n}\n","export class Topic {\n    id: number;\n    title: string;\n    votes: number;\n\n    constructor(id: number, title: string, votes: number) {\n        this.id = id;\n        this.title = title;\n        this.votes = votes;\n    }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Topic } from '../components/topic.model';\nimport { map } from 'rxjs/operators';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\n// Value of url will be injected in app.module\nexport const API_URL:string = 'API_URL';\n\n\n@Injectable()\nexport class RedditService {\n\n    constructor(\n        @Inject(API_URL) private apiUrl: string,\n        private http : Http\n    ) {\n        \n    }\n\n    // Send titile as parameter to server to create a new topic\n    newTopic(tt: string): Observable<boolean> {\n        console.log(tt);\n        let headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n        let opts = new RequestOptions({headers: headers});\n        return this.http.post(\n            `${this.apiUrl}/newtopic`,\n            JSON.stringify({\n                title : tt\n            }), opts\n        ).pipe(map((res: Response) => {\n            return <any>res.json().status;\n        }));\n    } \n\n    // Request the sorted topic list (including top 20 topics) from server\n    getTopics(): Observable <Topic[]> {\n        return this.http.get(`${this.apiUrl}/topics`)\n            .pipe(map((res: Response) => {\n                return (<any>res.json()).items.map(item => {\n                    console.log(\"item : \", item);\n                    return new Topic(Number(item.id), item.title, Number(item.votes));\n                });\n            }));\n    }\n}\n\nexport var REDDIT_PROVIDERS: Array<any> = [\n    {provide: RedditService, useClass: RedditService}\n];","import {Injectable, Inject} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport { API_URL } from './RedditService';\nimport { Http, Response } from '@angular/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class VoteService {\n\n    constructor(\n        @Inject(API_URL) private url: string,\n        private http: Http\n    ){}\n\n    voteById(topicId: number, type: boolean): Observable<boolean> {\n        let adjust: number = type?1:-1;\n        return this.http.get(`${this.url}/votes?id=${topicId}&type=${adjust}`)\n            .pipe(map((res: Response) => {\n                return <any>res.json().status;\n            }));\n    }\n}\n\nexport var VOTE_PROVIDERS: Array<any> = [\n    {provide: VoteService, useClass: VoteService}\n];","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}